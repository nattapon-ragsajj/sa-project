import { useState } from "react";
import { NavLink } from "react-router-dom";
import "./rawMaterial.css";

type OrderItem = {
  id: number;
  lotId: string;
  code: string;
  name: string;
  qty: number;
};

type PurchaseRequest = {
  id: string;
  createdDate: string;
};

type AllocateRow = {
  id: number;
  lotId: string;
  code: string;
  name: string;
  qty: number;
  importDate: string;
  expDate: string;
  status: string;
};

export default function RawMaterialAllocate() {
  const [rows, setRows] = useState<AllocateRow[]>([]);
  const [orders, setOrders] = useState<OrderItem[]>([
    { id: 1, lotId: "", code: "", name: "", qty: 0 },
  ]);
  const [requests, setRequests] = useState<PurchaseRequest[]>([]);
  const [openCreate, setOpenCreate] = useState(false);
  const [openList, setOpenList] = useState(false);

  const [errorMsg, setErrorMsg] = useState("");

  const addOrderRow = () => {
    const newId = Math.max(0, ...orders.map((o) => o.id)) + 1;
    setOrders([...orders, { id: newId, lotId: "", code: "", name: "", qty: 0 }]);
  };

  const removeOrderRow = (id: number) => {
    if (orders.length === 1) {
      setErrorMsg("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
      return;
    }
    setOrders((prev) => prev.filter((o) => o.id !== id));
  };

  const updateOrder = (
    id: number,
    field: keyof OrderItem,
    value: string | number
  ) => {
    setOrders((prev) =>
      prev.map((o) => (o.id === id ? { ...o, [field]: value } : o))
    );
  };

  const confirmCreate = () => {
    const invalid = orders.some(
      (o) => !o.lotId || !o.code || !o.name || o.qty <= 0
    );
    if (invalid) {
      setErrorMsg("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    const newRows: AllocateRow[] = orders.map((o, i) => ({
      id: rows.length + i + 1,
      lotId: o.lotId,
      code: o.code,
      name: o.name,
      qty: o.qty,
      importDate: new Date().toISOString().split("T")[0],
      expDate: "",
      status: "‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£",
    }));
    setRows((prev) => [...prev, ...newRows]);

    const newReq: PurchaseRequest = {
      id: "PR-" + String(Math.floor(Math.random() * 90000) + 10000),
      createdDate: new Date().toISOString().split("T")[0],
    };
    setRequests((prev) => [...prev, newReq]);

    setErrorMsg("");
    setOrders([{ id: 1, lotId: "", code: "", name: "", qty: 0 }]);
    setOpenCreate(false);
  };

  return (
    <div className="rm-page">
      <h2 className="wmm-title">‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h2>


      {/* ===== Tabs ===== */}
      <div className="rm-top">
        <div className="rm-tabs">
          <NavLink to="/warehouse/raw-material" end className="tab-link">
            ‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </NavLink>
          <NavLink to="/warehouse/raw-material/lot" className="tab-link">
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </NavLink>
          <NavLink to="/warehouse/raw-material/store" className="tab-link">
            ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </NavLink>
          <NavLink
            to="/warehouse/raw-material/allocate"
            className="tab-link active"
          >
            ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </NavLink>
        </div>
        <div className="rm-right-buttons">
          <button className="btn primary" onClick={() => setOpenCreate(true)}>
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </button>
          <button className="btn primary" onClick={() => setOpenList(true)}>
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </button>
        </div>
      </div>

      {/* ===== Toolbar ===== */}
      <div className="rm-toolbar">
        <div className="tools-left">
          {/* <div className="title">‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div> */}
        </div>

        {/* <div className="rm-right-buttons">
          <button className="btn primary" onClick={() => setOpenCreate(true)}>
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </button>
          <button className="btn primary" onClick={() => setOpenList(true)}>
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
          </button>
        </div> */}
      </div>

      {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß */}
      <div className="rm-table">
        <div className="rm-row rm-head">
          <div className="th">‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï</div>
          <div className="th">‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div>
          <div className="th">‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div>
          <div className="th">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</div>
          <div className="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</div>
          <div className="th">‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</div>
          <div className="th">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
        </div>

        {rows.map((r) => (
          <div key={r.id} className="rm-row">
            <div className="td">{r.lotId}</div>
            <div className="td">{r.code}</div>
            <div className="td">{r.name}</div>
            <div className="td mono">{r.qty}</div>
            <div className="td">{r.importDate}</div>
            <div className="td">{r.expDate || "-"}</div>
            <div className="td">{r.status}</div>
          </div>
        ))}

        {rows.length === 0 && (
          <div className="rm-empty">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div>
        )}
      </div>

      {/* ===== Modal: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ===== */}
      
        
      {/* ===== Modal: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ===== */}
{openCreate && (
  <>
    <button className="rm-overlay" onClick={() => setOpenCreate(false)} />
    <div className="rm-modal large" role="dialog">
      <h3 className="modal-title">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h3>

      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
      {errorMsg && <div className="rm-error">{errorMsg}</div>}

      <div className="multi-order-list">
        {orders.map((o) => (
          <div key={o.id} className="order-block">
            <div className="order-fields">
              <div className="pair">
                <label>‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï:</label>
                <input
                  value={o.lotId}
                  onChange={(e) => updateOrder(o.id, "lotId", e.target.value)}
                />
              </div>
              <div className="pair">
                <label>‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:</label>
                <input
                  value={o.code}
                  onChange={(e) => updateOrder(o.id, "code", e.target.value)}
                />
              </div>
              <div className="pair">
                <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:</label>
                <input
                  value={o.name}
                  onChange={(e) => updateOrder(o.id, "name", e.target.value)}
                />
              </div>
              <div className="pair small">
                <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
                <input
                  type="number"
                  min={0}
                  value={o.qty}
                  onChange={(e) =>
                    updateOrder(o.id, "qty", Number(e.target.value))
                  }
                />
              </div>
              <div className="pair small">
                <button
                  className="btn danger small"
                  onClick={() => removeOrderRow(o.id)}
                >
                  üóëÔ∏è ‡∏•‡∏ö
                </button>
              </div>
            </div>
          </div>
        ))}
        <button className="btn soft" onClick={addOrderRow}>
          + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        </button>
      </div>

      <div className="modal-actions">
        <button className="btn ghost" onClick={() => setOpenCreate(false)}>
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
        <button className="btn primary" onClick={confirmCreate}>
          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        </button>
      </div>
    </div>
  </>
)}

{/* ===== Modal: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ===== */}
{openList && (
  <>
    <button className="rm-overlay" onClick={() => setOpenList(false)} />
    <div className="rm-modal list-popup" role="dialog">
      {/* <button className="close-btn" onClick={() => setOpenList(false)}>‚úñ</button> */}
      <h3 className="modal-title">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</h3>

      <div className="rm-table inner">
        <div className="rm-row rm-head">
          <div className="th">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div>
          <div className="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</div>
        </div>

        {requests.map((r) => (
          <div key={r.id} className="rm-row">
            <div className="td">{r.id}</div>
            <div className="td">{r.createdDate}</div>
          </div>
        ))}

        {requests.length === 0 && (
          <div className="rm-empty">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</div>
        )}
        
      </div>
      <div className="modal-actions center">
        <button className="btn primary" onClick={() => setOpenList(false)}>
          ‡∏õ‡∏¥‡∏î
        </button>
      </div>
    </div>
  </>
)}

    </div>
    
  );
}
