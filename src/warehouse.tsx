import { useMemo, useState, useEffect } from "react";
import { NavLink } from "react-router-dom";
import "./warehouse.css";

type Row = {
  id: number;
  lotNo: string;        // ‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï
  orderNo: string;      // ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡∏•‡∏¥‡∏ï (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
  name: string;         // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  qty: number;          // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  unit: string;         // ‡∏´‡∏ô‡πà‡∏ß‡∏¢
  mfgDate: string;      // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï
  expDate: string;      // ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const seed: Row[] = [
  { id: 1, lotNo: "L-240901", orderNo: "PO-001", name: "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏£‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß", qty: 40, unit: "‡∏Å‡∏Å.", mfgDate: "2025-09-01", expDate: "2026-09-01" },
  { id: 2, lotNo: "L-240902", orderNo: "PO-001", name: "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏£‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß", qty: 80, unit: "‡∏Å‡∏Å.", mfgDate: "2025-09-10", expDate: "2026-09-10" },
  { id: 3, lotNo: "L-240915", orderNo: "PO-002", name: "‡πÅ‡∏õ‡πâ‡∏á‡∏™‡∏≤‡∏•‡∏µ", qty: 30, unit: "‡∏Å‡∏Å.", mfgDate: "2025-09-15", expDate: "2026-03-15" },
  { id: 4, lotNo: "L-240920", orderNo: "PO-003", name: "‡πÄ‡∏ô‡∏¢‡∏à‡∏∑‡∏î", qty: 12, unit: "‡∏Å‡∏Å.", mfgDate: "2025-09-20", expDate: "2026-01-20" },
  { id: 5, lotNo: "L-240925", orderNo: "PO-004", name: "‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏±‡∏ó‡∏â‡∏∞", qty: 6, unit: "‡∏Å‡∏Å.", mfgDate: "2025-09-25", expDate: "2026-09-25" },
  { id: 6, lotNo: "L-240930", orderNo: "PO-005", name: "‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", qty: 80, unit: "‡∏Å‡∏Å.", mfgDate: "2025-09-30", expDate: "2027-09-30" },
];

export default function WareHouse() {
  const [rows, setRows] = useState<Row[]>(seed);
  const [q, setQ] = useState("");
  const [cat, setCat] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  const [openSheet, setOpenSheet] = useState(false);
  const [active, setActive] = useState<Row | null>(null);
  const [takeQty, setTakeQty] = useState<number>(0);
  const [takeType, setTakeType] = useState<"‡∏Ç‡∏≤‡∏¢" | "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏">("‡∏Ç‡∏≤‡∏¢");
  const [note, setNote] = useState("");
  const [err, setErr] = useState("");

  // üü£ state ‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡πá‡∏≠‡∏ï
  const [selectedProduct, setSelectedProduct] = useState<string | null>(null);

  useEffect(() => {
    const onEsc = (e: KeyboardEvent) => {
      if (e.key === "Escape") setOpenSheet(false);
    };
    window.addEventListener("keydown", onEsc);
    return () => window.removeEventListener("keydown", onEsc);
  }, []);

  const filtered = useMemo(() => {
    const s = q.trim().toLowerCase();
    return rows.filter(
      (r) =>
        !s ||
        r.lotNo.toLowerCase().includes(s) ||
        r.orderNo.toLowerCase().includes(s) ||
        r.name.toLowerCase().includes(s)
    );
  }, [rows, q]);

  const confirmTakeOut = () => {
    if (!active) return;
    if (takeQty <= 0) {
      setErr("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å (> 0)");
      return;
    }
    if (takeQty > active.qty) {
      setErr("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠");
      return;
    }

    setRows((prev) =>
      prev.map((x) => (x.id === active.id ? { ...x, qty: x.qty - takeQty } : x))
    );

    try {
      const rec = {
        id: Date.now(),
        time: new Date().toISOString(),
        type: takeType,
        lotNo: active.lotNo,
        orderNo: active.orderNo,
        name: active.name,
        qty: takeQty,
        unit: active.unit,
        note: note?.trim() || "",
      };
      const raw = localStorage.getItem("wh-history");
      const arr = raw ? JSON.parse(raw) : [];
      arr.unshift(rec);
      localStorage.setItem("wh-history", JSON.stringify(arr));
    } catch {}
    setOpenSheet(false);
  };

  // ‚úÖ ‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
  const uniqueProducts = useMemo(() => {
    const map = new Map<string, { name: string; total: number; lots: number }>();
    for (const r of rows) {
      if (!map.has(r.orderNo))
        map.set(r.orderNo, { name: r.name, total: 0, lots: 0 });
      const p = map.get(r.orderNo)!;
      p.total += r.qty;
      p.lots += 1;
    }
    return Array.from(map.entries()).map(([code, v]) => ({
      code,
      ...v,
    }));
  }, [rows]);

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const selectedLots = useMemo(
    () => rows.filter((r) => r.orderNo === selectedProduct),
    [rows, selectedProduct]
  );

  return (
    <div className="wh-page">
      {/* ===== Tabs ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ===== */}
      
      
      <h2 className="wmm-title">‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>

      <div className="wh-header">
        

        <div className="wh-tabs">
    <NavLink to="/warehouse" end className="tab-link">
      ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    </NavLink>
    <NavLink to="/warehouse/warehouse-stock" end className="tab-link">
      ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    </NavLink>
    <NavLink to="/warehouse/manage-product" end className="tab-link">
      ‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å
    </NavLink>
  </div>

  {/* ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏ö */}
  <div className="wh-tools">
    <input
      className="wh-input"
      placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ‡∏£‡∏´‡∏±‡∏™ / ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
      value={q}
      onChange={(e) => setQ(e.target.value)}
    />
    <select
      className="wh-input"
      value={cat}
      onChange={(e) => setCat(e.target.value)}
    >
      <option>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
    </select>
  </div>
        
      </div>

      {/* ================= ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤) ================= */}
      {!selectedProduct && (
        <div className="wh-table-wrap">
          <div className="wh-table">
            <div className="wh-row wh-head">
              <div>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              <div>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              <div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡πá‡∏≠‡∏ï</div>
            </div>

            {uniqueProducts.map((p, i) => (
              <div
                key={p.code}
                className={`wh-row wh-body ${i % 2 ? "alt" : ""}`}
                onClick={() => setSelectedProduct(p.code)}
                role="button"
              >
                <div>{p.code}</div>
                <div>{p.name}</div>
                <div>{p.total}</div>
                <div>{p.lots}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* ================= ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡πá‡∏≠‡∏ï ================= */}
      {selectedProduct && (
        <div>
          <div style={{ marginBottom: "25px" ,marginTop: "25px"}}>
            <strong>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</strong> {selectedLots[0]?.orderNo} <br />
            <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</strong> {selectedLots[0]?.name}
          </div>

          <div className="wh-table-wrap">
            <div className="wh-table">
              <div className="wh-row wh-head">
                <div>‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï</div>
                <div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</div>
                <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï</div>
                <div>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</div>
              </div>

              {selectedLots.map((r, i) => (
                <div
                  key={r.id}
                  className={`wh-row wh-body ${i % 2 ? "alt" : ""}`}
                  onClick={() => setActive(r)}
                  role="button"
                >
                  <div>{r.lotNo}</div>
                  <div>{r.qty}</div>
                  <div>{r.mfgDate}</div>
                  <div>{r.expDate}</div>
                </div>
              ))}
            </div>
          </div>

          <div style={{ marginTop: "20px" }}>
            <button className="btn primary" onClick={() => setSelectedProduct(null)}>
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
          </div>
        </div>
      )}

      {/* ========== ‡πÅ‡∏ú‡πà‡∏ô‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) ========== */}
      {openSheet && active && (
        <>
          <button
            className="sheet-backdrop"
            onClick={() => setOpenSheet(false)}
            aria-label="close"
          />
          <div className="sheet">
            <div className="sheet-left">
              <div>
                <span>‡πÄ‡∏•‡∏Ç‡∏•‡πá‡∏≠‡∏ï</span>
                <b>{active.lotNo}</b>
              </div>
              <div>
                <span>‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡∏•‡∏¥‡∏ï</span>
                <b>{active.orderNo}</b>
              </div>
              <div>
                <span>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                <b>{active.name}</b>
              </div>
              <div>
                <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
                <b>{active.qty.toLocaleString()}</b>
              </div>
              <div>
                <span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï</span>
                <b>{active.mfgDate}</b>
              </div>
              <div>
                <span>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</span>
                <b>{active.expDate}</b>
              </div>
            </div>

            <div className="sheet-right">
              <div className="form-card">
                <h3>‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å</h3>
                <label className="inline">
                  <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
                  <input
                    type="number"
                    min={0}
                    value={takeQty}
                    onChange={(e) => setTakeQty(Number(e.target.value))}
                  />
                  <span className="unit">{active.unit}</span>
                </label>
                <div className="inline">
                  <span>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å</span>
                  <div className="seg">
                    <button
                      type="button"
                      className={`seg-btn ${
                        takeType === "‡∏Ç‡∏≤‡∏¢" ? "on" : ""
                      }`}
                      onClick={() => setTakeType("‡∏Ç‡∏≤‡∏¢")}
                    >
                      ‡∏Ç‡∏≤‡∏¢
                    </button>
                    <button
                      type="button"
                      className={`seg-btn ${
                        takeType === "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" ? "on" : ""
                      }`}
                      onClick={() => setTakeType("‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")}
                    >
                      ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                    </button>
                  </div>
                </div>

                <label className="block">
                  <span>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</span>
                  <textarea
                    rows={4}
                    value={note}
                    onChange={(e) => setNote(e.target.value)}
                  />
                </label>

                {err && <div className="form-error">{err}</div>}

                <div className="sheet-actions">
                  <button
                    className="btn cancel"
                    onClick={() => setOpenSheet(false)}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                  <button className="btn confirm" onClick={confirmTakeOut}>
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                  </button>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
